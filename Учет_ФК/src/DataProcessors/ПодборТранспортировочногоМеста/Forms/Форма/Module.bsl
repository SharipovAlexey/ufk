
&НаКлиенте
Процедура ПодобранныеТранспортныеМестаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоказыватьТолькоОстатки = 1;
	ЗапрашиватьКоличество 	= Истина;
	ЗапрашиватьЦену 		= Истина;
	
	СписокСвойств = "ДатаРасчетов, Заголовок, ИмяТаблицы,  Организация,
		|Склад,  ВидПодбора";
		
	НеобязательныеПараметры = Новый Структура;
	
	НеобязательныеПараметры.Вставить("ПоказыватьОстатки",              Истина);
	НеобязательныеПараметры.Вставить("ЕстьКоличество",                 Истина);
	
	Для каждого НеобязательныйПараметр Из НеобязательныеПараметры Цикл
		
		ИмяПараметра = НеобязательныйПараметр.Ключ;
		
		Если Параметры.Свойство(ИмяПараметра) Тогда
			СписокСвойств = СписокСвойств + "," + ИмяПараметра;
		КонецЕсли; 	
		
	КонецЦикла; 
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПодборТранспортировочныхМест",);
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("ПоказыватьТолькоОстатки") Тогда 
			ПоказыватьТолькоОстатки = Настройки.ПоказыватьТолькоОстатки; 
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НеобязательныеПараметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СписокСвойств);
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	УправлениеСписком();
КонецПроцедуры

&НаСервере
Процедура УправлениеСписком()
	
	
	ДатаОстаткиЦены    = ДатаРасчетов;
	
	ИспользоватьОтборПоСкладу     = Истина;
	
	
	СписокТранспортировочныхМест.Параметры.УстановитьЗначениеПараметра("ДатаОстатков",              ДатаОстаткиЦены);
	СписокТранспортировочныхМест.Параметры.УстановитьЗначениеПараметра("Склад",                    	Склад);
	СписокТранспортировочныхМест.Параметры.УстановитьЗначениеПараметра("Организация",               Организация);
	СписокТранспортировочныхМест.Параметры.УстановитьЗначениеПараметра("СостояниеХранение",         Перечисления.СостоянияХранения.Хранение);
	
	УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

& НаКлиентеНаСервереБезКонтекста
// Изменяет элемент отбора динамического списка.
//
// Параметры:
// Список         - обрабатываемый динамический список.
// ИмяПоля        - имя поля компоновки, отбор по которому нужно установить.
// ПравоеЗначение - значение отбора, по умолчанию - Неопределено.
// Использование  - признак использования отбора, по умолчанию - Ложь.
// ВидСравнения   - вид сравнения отбора, по умолчанию - Равно.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Использование = Ложь, ВидСравнения = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяПоля);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяПоля, 
		ПравоеЗначение, 
		ВидСравнения, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, 
		Использование); 
		
КонецПроцедуры 


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(Форма)

	ИзменитьЭлементОтбораСписка(
		Форма.СписокТранспортировочныхМест, 
		"КоличествоМест", 
		0, 
		Форма.ПоказыватьТолькоОстатки = 2, 
		ВидСравненияКомпоновкиДанных.Больше
		);
КонецПроцедуры


&НаКлиенте
Процедура ПоказыватьТолькоОстаткиПриИзменении(Элемент)
	УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры(ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ПодобранныеТранспортныеМестаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура СписокТранспортировочныхМестВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СписокТранспортировочныхМестВыбор(Элемент, Значение, , СтандартнаяОбработка);
КонецПроцедуры


&НаКлиенте
Процедура СписокТранспортировочныхМестВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	
	ПараметрыВыбранногоТМ = Новый Структура;
	ПараметрыВыбранногоТМ.Вставить("ВесБруттоВлажный", Элемент.ТекущиеДанные.ВесБруттоВлажный);
	ПараметрыВыбранногоТМ.Вставить("НомерМестаВПартии", Элемент.ТекущиеДанные.НомерМеста);
	ПараметрыВыбранногоТМ.Вставить("НомерПломбы", Элемент.ТекущиеДанные.НомерПломбы);
	ПараметрыВыбранногоТМ.Вставить("ПартияПродукции", Элемент.ТекущиеДанные.Партия);
	ПараметрыВыбранногоТМ.Вставить("ТранспортировочноеМесто", Элемент.ТекущиеДанные.Ссылка);
	ПараметрыВыбранногоТМ.Вставить("ВесНеттоВлажный", Элемент.ТекущиеДанные.ВесНеттоВлажный);
	
	ДобавитьВыбранноеТранспортировочноеМесто(ПараметрыВыбранногоТМ);
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьВыбранноеТранспортировочноеМесто(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ТранспортировочноеМесто", Результат.ТранспортировочноеМесто);
	РезультатПоиска = Объект.ПодобранныеТранспортировочныеМеста.НайтиСтроки(ПараметрыПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.ПодобранныеТранспортировочныеМеста.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат,,);
	Иначе
		ТекущаяСтрока = РезультатПоиска[0];
	КонецЕсли;
	
	// Активизируем текущую строку табличной части
	Элементы.ПодобранныеТранспортировочныеМеста.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ПеренестиВДокумент И Объект.ПодобранныеТранспортировочныеМеста.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Подобранные позиции не перенесены в документ.
			|
			|Перенести?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиВДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренестиВДокументЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ПеренестиВДокумент = Истина;
		Объект.ПодобранныеТранспортировочныеМеста.Очистить();
		Закрыть();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СтруктураВозврата = ПриЗакрытииНаСервере();
	
	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()
	
	СтруктураВозврата = Новый Структура();
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ПоказыватьТолькоОстатки",   ПоказыватьТолькоОстатки);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПодборТранспортировочныхМест", , ПараметрыЗакрытия);
	
	Если ПеренестиВДокумент Тогда
		АдресПодобранныхПозицийВХранилище = ПоместитьПодобранныеПозицииВХранилище();
		СтруктураВозврата.Вставить("АдресПодобранныхПозицийВХранилище", АдресПодобранныхПозицийВХранилище);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПоместитьПодобранныеПозицииВХранилище()
	
	ТаблицаДанных = Объект.ПодобранныеТранспортировочныеМеста.Выгрузить();
	
	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаДанных, УникальныйИдентификатор);
	
	Возврат АдресПодобраннойНоменклатурыВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартияИспользованиеПриИзменении(Элемент)
	
	имяПоля = "Партия";
	ПравоеЗначение = ЭтотОбъект["Отбор" + ИмяПоля];
	Использование  = ЭтотОбъект["Отбор" + ИмяПоля + "Использование"];
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ЭтотОбъект.СписокТранспортировочныхМест.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяПоля);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭтотОбъект.СписокТранспортировочныхМест.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоля,
		ПравоеЗначение,
		Неопределено,
		,
		Использование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартияПриИзменении(Элемент)
	ОтборПартияИспользование = ЗначениеЗаполнено(ОтборПартия);
	
	имяПоля = "Партия";
	ПравоеЗначение = ЭтотОбъект["Отбор" + ИмяПоля];
	Использование  = ЭтотОбъект["Отбор" + ИмяПоля + "Использование"];
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ЭтотОбъект.СписокТранспортировочныхМест.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяПоля);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭтотОбъект.СписокТранспортировочныхМест.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоля,
		ПравоеЗначение,
		Неопределено,
		,
		Использование);
	
КонецПроцедуры


